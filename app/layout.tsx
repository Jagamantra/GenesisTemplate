'use client'; // Required for useTheme hook

import type { ReactNode } from 'react'; // Import ReactNode
import React from 'react'; // Import React for useMemo
import { GeistSans } from 'geist/font/sans';
import './globals.css';
import { ThemeProvider, useTheme } from '@/contexts/theme-provider'; // Import useTheme
import { AuthProvider } from '@/contexts/auth-provider';
import { Toaster as SonnerToaster } from 'sonner';
import { projectConfig } from '@/config/project.config';

// Static metadata cannot be used in a client component.
// If appName needs to be dynamic in metadata, this needs to be handled differently,
// possibly by moving metadata to a server component parent or using generateMetadata.
// For now, removing dynamic title from here as RootLayout is client component due to useTheme.
// export const metadata: Metadata = {
//   title: projectConfig.appName || 'Genesis Template',
//   description: `A dynamic project template powered by Next.js, Tailwind CSS, and shadcn/ui. Generated by Firebase Studio.`,
// };


// Create a client component to consume the theme for SonnerToaster
function ThemedSonnerToaster() {
  const { theme, accentColor } = useTheme(); 

  // Memoize toastOptions to ensure it's stable unless theme or accentColor changes.
  const toastOptions = React.useMemo(() => ({
    classNames: {
      // Style the action button (e.g., "Undo") to use primary/accent color
      actionButton: 'bg-primary text-primary-foreground hover:bg-primary/90',
      // Optional: Style cancel button if ever used
      // cancelButton: 'bg-muted text-muted-foreground hover:bg-muted/80',
    },
  }), [accentColor]); // FIX: Added accentColor to the dependency array

  // Create a key that changes when theme or accentColor changes
  // This forces SonnerToaster to re-mount and pick up new styles
  const sonnerKey = `${theme}-${accentColor}`;

  return (
    <SonnerToaster
      key={sonnerKey} // Add key here
      richColors
      closeButton={false} // Remove the 'x' close button
      theme={theme as 'light' | 'dark' | 'system'} // Apply app theme to toasts
      toastOptions={toastOptions}
    />
  );
}


export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        {/* Title can be set here statically or dynamically via a server component if needed */}
        <title>{projectConfig.appName || 'Genesis Template'}</title>
        <meta name="description" content={`A dynamic project template powered by Next.js, Tailwind CSS, and shadcn/ui.`} />
      </head>
      <body className={`${GeistSans.variable} font-sans antialiased flex flex-col min-h-screen`}>
        <ThemeProvider
          storageKey="genesis-theme"
          defaultTheme="system"
        >
          <AuthProvider>
            {children}
            <ThemedSonnerToaster />
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
